import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# === –î–ê–ù–ù–´–ï ===
API_TOKEN = "7956233168:AAH_VTL3nv0W3koyv0b2fnKlpUNgcdSc57g"
ADMIN_ID = 7638761975

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM ===
class AnswerState(StatesGroup):
    waiting_for_reply = State()

# === –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def get_admin_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{user_id}")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"close:{user_id}")]
    ])

# === –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ ===
def get_rating_keyboard():
    keyboard = []
    for row in range(2):
        buttons = []
        for i in range(1 + row * 5, 6 + row * 5):
            buttons.append(InlineKeyboardButton(text=f"{i}‚≠ê", callback_data=f"rate:{i}"))
        keyboard.append(buttons)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# === /start ===
async def handle_start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–Ø ‚Äî ChaldHelp, –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ Chald Studio.\n"
        f"–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )

# === /help ===
async def handle_help(message: Message):
    await message.answer(
        "üìò –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n"
        "- –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É\n"
        "- –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∏—Ç —Ç–∏–∫–µ—Ç –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å\n"
        "- –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!"
    )

# === –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ ===
async def handle_player_message(message: Message, bot: Bot):
    if message.from_user.id == ADMIN_ID:
        return  # –∞–¥–º–∏–Ω –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç, –Ω–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    text = message.text

    ticket_text = (
        f"üì® –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç!\n"
        f"üë§ @{username} (ID: {user_id})\n"
        f"üìù {text}"
    )

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=ticket_text,
        reply_markup=get_admin_keyboard(user_id)
    )

    await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")

# === –û—Ç–≤–µ—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É ===
async def admin_reply_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return

    user_id = int(callback.data.split(":")[1])
    await state.set_state(AnswerState.waiting_for_reply)
    await state.update_data(reply_to=user_id)
    await callback.message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (ID: {user_id})")
    await callback.answer()

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–≥—Ä–æ–∫—É ===
async def process_admin_reply(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    data = await state.get_data()
    user_id = data.get("reply_to")

    if user_id:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await message.bot.send_message(
                user_id,
                f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}\n\n"
                "‚ö†Ô∏è –ò–∑-–∑–∞ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞, –µ—Å–ª–∏ –≤—ã —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª–∏, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç."
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É.")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É.\n{e}")
    await state.clear()

# === –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ ===
async def close_ticket_callback(callback: CallbackQuery, bot: Bot):
    if callback.from_user.id != ADMIN_ID:
        return

    user_id = int(callback.data.split(":")[1])

    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_rating_keyboard()
        )
    except:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É.")

    await callback.message.answer("üì¶ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
    await callback.answer()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ ===
async def rating_handler(callback: CallbackQuery, bot: Bot):
    score = int(callback.data.split(":")[1])
    await callback.message.edit_text(f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {score}/10!")
    await bot.send_message(ADMIN_ID, f"üì• –ò–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É: {score}/10")
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
def setup_handlers(dp: Dispatcher):
    dp.message.register(handle_start, F.text == "/start")
    dp.message.register(handle_help, F.text == "/help")
    dp.message.register(process_admin_reply, AnswerState.waiting_for_reply)
    dp.message.register(handle_player_message)
    dp.callback_query.register(admin_reply_callback, F.data.startswith("reply"))
    dp.callback_query.register(close_ticket_callback, F.data.startswith("close"))
    dp.callback_query.register(rating_handler, F.data.startswith("rate"))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    setup_handlers(dp)

    print("ü§ñ ChaldHelp –∑–∞–ø—É—â–µ–Ω (v2: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
